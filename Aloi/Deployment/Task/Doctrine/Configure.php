<?php
/* Copyright 2010 aloi-project
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301, USA
 */

/**
 *
 * @author Cameron Manderson <cameronmanderson@gmail.com> (Aloi Contributor)
 */
class Aloi_Deployment_Task_Doctrine_Configure extends Aloi_Deployment_Task_Configure {
	const DOCTRINE_CONFIGURATION = 'doctrine-connection';
	const DOCTRINE_MANAGER = 'doctrine-manager';
	const DOCTRINE_ENVIRONMENT = 'doctrine-environment';
	
	public function perform(Aloi_Deployment_Arguments $arguments) {
		// Obtain the target
		$target = $arguments->getArgument('target');
		
		$outputFile = $arguments->getArgument('doctrine-settings-file');
		if(empty($outputFile)) $outputFile = 'WebRoot' . DIRECTORY_SEPARATOR . 'WEB-INF' . DIRECTORY_SEPARATOR . 'settings' . DIRECTORY_SEPARATOR . 'doctrine.php';
		
		ob_start();
		$date = date('Y-m-d H:i:s');
		ob_end_clean();
		
		// Build the configuration
		ob_start();
		print '<?php' . "\n" . '// Generated by Deployment_Task_Doctrine_Configure at ' . $date . "\n\n";
		print "\$doctrine = array();\n";
		
		// Print the general manager settings
		print "\$doctrine['MANAGER'] = array();\n";
		$manager = $this->retrieveManagerConfiguration($target, $arguments);
		foreach($manager as $name => $configuration) {
			if($name == 'default') {
				foreach($configuration as $key => $value) {
					print "\$doctrine['MANAGER']['" . $key . "'] = '" . $value . "';\n";
				}
			} else {
				// TODO: This is handling connection specific manager settings
			}
		}
		
		// Print the connection settings
		$connections = $this->retrieveConnection($target, $arguments);
		foreach($connections as $name => $configuration) {
			print "\$doctrine['CONNECTION']['" . $name . "'] = array();\n";
			foreach($configuration as $key => $value) {
				print "\$doctrine['CONNECTION']['" . $name . "']['" . $key . "'] = '" . $value . "';\n";
			}
		}
		
		// End the configuration
		$configurationFileContents = ob_get_contents();
		ob_end_clean();
		
		// Write out the configuration file
		file_put_contents(Aloi_Deployment::getInstance()->getPath() . DIRECTORY_SEPARATOR . $outputFile, $configurationFileContents);
	}
	
	
	public function retrieveManagerConfiguration($target, Aloi_Deployment_Arguments $arguments) {
		return $this->retrieveConfiguration($target, self::DOCTRINE_MANAGER, $arguments);
	}
	
	public function retrieveConnection($target, Aloi_Deployment_Arguments $arguments) {
		return $this->retrieveConfiguration($target, self::DOCTRINE_CONFIGURATION, $arguments);
	}
	
	public function retrieveEnvironmentConfiguration($target, Aloi_Deployment_Arguments $arguments) {
		// This is the default aloi configuration
		$config = array(
			'data_fixtures_path' => 'src/Fixtures',
			'models_path' => 'src/Model',
			'migrations_path' => 'src/Migrations',
			'sql_path' => 'sql',
			'yaml_schema_path' => 'src/Model',
			'generate_models_options' => array (
				'generateBaseClasses' => true,
				'classPrefix' => 'Model_',
				'classPrefixFiles' => false,
				'baseClassPrefix' => 'Base_',
				'baseClassesDirectory' => null,
				'pearStyle' => true
			)
		);
		
		// Get the environment to overwrite
		$environmentConfiguration = $this->retrieveConfiguration($target, self::DOCTRINE_ENVIRONMENT, $arguments);
		foreach($config as $key => $configurationDefault) {
			if(!isset($environmentConfiguration[$key])) {
				// Use the default here
				$environmentConfiguration[$key] = $config[$key];
			}
		}
		
		return $environmentConfiguration;
	}
}